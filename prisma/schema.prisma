// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// title, couponCode, expiryDate
model Coupon {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  couponCode  String
  expiryDate  DateTime
  isActive    Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Banner {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  link        String
  imageUrl    String
  isActive    Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  imageUrl    String?
  description String?
  isActive    Boolean

  products    Product[]
  trainings   Training[]
  marketIds   String[]  @db.ObjectId
  markets     Market[]  @relation(fields: [marketIds], references: [id])

  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
}

model Market {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String     @unique
  logoUrl     String?
  description String?
  isActive    Boolean

  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])

  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  imageUrl    String?
  description String?
  isActive    Boolean
  isWholesale    Boolean
  sku         String?
  barcode     String?
  productCode String?
  unit        String?
  productPrice  Float
  salePrice     Float
  wholesalePrice     Float?
  wholesaleQty     Int?
  productStock     Int
  qty     Int
  tags          String[]

  category      Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId    String     @db.ObjectId

  user          User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String  @db.ObjectId

  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt
}

model FarmerProfile{
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  farmerUniqueCode     String
  contactPerson        String?
  contactPersonPhone   String?
  farmerProfileImageUrl      String?
  email                String
  name                 String
  notes                String?
  phone                String
  physicalAddress      String?
  terms                String?
  isActive             Boolean
  products             String[]
  landSize             Float
  mainCrop             String


  user                 User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId               String  @db.ObjectId @unique

  createdAt            DateTime   @default(now())
  updatedAt            DateTime?  @updatedAt
}

model Training{
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  slug         String   @unique
  imageUrl     String?
  description  String?
  content      String?
  isActive     Boolean

  category     Category?   @relation(fields: [categoryId], references: [id])
  categoryId   String     @db.ObjectId

  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt
}


enum UserRole{
  ADMIN
  USER
  FARMER
  MODERATOR
}

//USER => ADMIN, FARMER, CUSTOMER, AGENT
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String
  emailVerified Boolean   @default(false)
  products      Product[]
  verificationToken   String?

  role          UserRole  @default(USER)

  farmerProfile FarmerProfile?
  profile     UserProfile?  //Link user to user profile

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}


// Model for normal user profile
model UserProfile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  // Add other fields for user onboarding information
  // For example:
  dateOfBirth  DateTime?
  address      String?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}